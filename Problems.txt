Exercises

10.0 - Preface

0 	There are four cards on a table showing symbols D, E, 2 and 3 (one per card).
	Each card has a letter on one side and a digit on the other. Which card(s) do you need
	to turn over to determine whether every card with a D on one side has a 3 on the other? Why?
	
		We first need to check the first card with a 'D', since 'every card with a D on one side
		has a 3 on the other' implies that cards having letters other than D can also have a 3
		on the other side. We also don't have to check the second card, since D isn't a digit.
		So we should also check the third card, to make sure that there's no D there.
		
		Let's reframe this in FM.
		
		Refer to each card by the character we see on it. i.e. "3" denotes the last card.
		Refer to the character on the flip-side of card C as C'. So C'' = C.
		So a card with a D on one side and 3 on the other is characterized as:
		C=D ⇒ C'=3. We say this for the four sides we can see, and the four we can't:
		by instatiating C with each of them:
		
				(D=D ⇒ D'=3)∧(D'=D ⇒ D''=3)
			∧	(E=D ⇒ E'=3)∧(E'=D ⇒ E''=3)
			∧	(2=D ⇒ 2'=3)∧(2'=D ⇒ 2''=3)
			∧	(3=D ⇒ 3'=3)∧(3'=D ⇒ 3''=3)
		
		Note that this expression should evaluate to ⊤ by our assumptions.
		Simplify this expression by using C''=C and that cards must have both letters and numbers.
			
				(D=D ⇒ D'=3)∧(D'=D ⇒ D''=3)
			∧	(E=D ⇒ E'=3)∧(E'=D ⇒ E''=3)
			∧	(2=D ⇒ 2'=3)∧(2'=D ⇒ 2''=3)
			∧	(3=D ⇒ 3'=3)∧(3'=D ⇒ 3''=3)
		≡		(⊤ ⇒ D'=3)∧(⊥ ⇒ ⊥)
			∧	(⊥ ⇒ E'=3)∧(⊥ ⇒ ⊥)
			∧	(⊥ ⇒ ⊥)∧(2'=D ⇒ ⊥)
			∧	(⊥ ⇒ ⊥)∧(3'=D ⇒ ⊤)
		≡		(⊤ ⇒ D'=3)∧(⊤)
			∧	(⊥ ⇒ E'=3)∧(⊤)
			∧	(⊤)∧(2'=D ⇒ ⊥)
			∧	(⊤)∧(3'=D ⇒ ⊤)
		≡		(⊤ ⇒ D'=3)
			∧	(⊥ ⇒ E'=3)
			∧	(2'=D ⇒ ⊥)
			∧	(3'=D ⇒ ⊤)
		≡		⊥v(D'=3)
			∧	Tv(E'=3)
			∧	¬(2'=D)v⊥
			∧	¬(3'=D)v⊤
		≡		(D'=3)
			∧	⊤v(E'=3)
			∧	¬(2'=D)
			∧	¬(3'=D)v⊤
		≡		(D'=3)
			∧	⊤v(E'=3)
			∧	¬(2'=D)
			∧	¬(3'=D)v⊤
		≡		(D'=3)
			∧	⊤
			∧	¬(2'=D)
			∧	⊤
		≡		(D'=3)∧(2'≠D)

10.1 - Basic Theories

2 	Prove each of the following laws of Binary Theory using the proof format in SubSection 1.0.1
	and any laws listed in Section 11.4. Do not use the Completion Rule.
	
	(f) - (a⇒c)∧(b⇒¬c)⇒¬(a∧b)
		
				(a⇒c)∧(b⇒¬c)		conflation.
			⇒	(a∧b)⇒(c∧¬c)		duality.
			≡	¬(c∧¬c)⇒¬(a∧b)	antecedent is law of noncontradiction
			≡	⊤⇒¬(a∧b)		identity for ⇒
			≡	¬(a∧b)
	
	(m) - (a⇒¬a)⇒¬a
	
				⊤				indirect proof, instantiate, replacing a with ¬a
			≡	(¬¬a⇒¬a)=¬a			double negation
			≡	(a⇒¬a)=¬a			antisymmetry (double implication)
			≡	((a⇒¬a)⇒¬a)∧(¬a⇒(a⇒¬a))	specialization
			⇒	((a⇒¬a)⇒¬a)			
	
	(p) - a=b ∨ a=c ∨ b=c
	
				(((a=b)=⊤) v b=c) v a=c		Context (assumption).
			≡	((a=b)=(b≠c)) v a=c v b=c 	Context (in exp0vexp1, changing exp0 we assume ¬exp1).
			≡	(a=(b=b)≠c) v a=c v b=c		Associative.
			≡	(a=⊤)≠c v a=c v b=c		Reflexive.
			≡	(a≠c) v a=c v b=c 		Context.
			≡	(a≠c) v a=c v ⊥ 		Context.
			≡	⊤
			
		alternate proof:
				
				a=b ∨ a=c ∨ b=c			identity and reflexive laws for =
			≡	a=b ∨ a=c v b=((a=a)=c)			symmetry and associative laws for =
			≡	(a=b v a=c) v (a=b)=(a=c)		main v distributes over =
			≡	(a=b v a=c v a=b) = (a=b v a=c v a=c)	symmetry, assoc and idempotence of v twice
			≡	(a=b v a=c) = (a=b v a=c)
			≡	⊤
			
	(s) - a⇒a∧b ≡ a⇒b ≡ a∨b⇒b
	
				a⇒a∧b
			≡	a⇒b			Discharge.
			≡	a⇒b ∧ ⊤		Context.
			≡	a⇒b ∧ (b⇒b)		Reflexive.
			≡	a∧b ⇒ b∧b 		Conflation.
			≡	a∧b ⇒ b		Idempotent.
			
			proof c/o prof hehner:
			
				a⇒a∧b ≡ a⇒b ≡ a∨b⇒b
			≡	(a⇒a ∧ a⇒b) ≡ a⇒b ≡ (a⇒b ∧ b⇒b)		distrib ⇒ over ∧, antidistrib ⇒ over ∨
			≡	a⇒b ≡ a⇒b ≡ a⇒b		reflexivity of ⇒ and identity of ∧, reflexivity of =
			≡	⊤									
			
	(u) if b∧c then P else Q fi ≡ if b then if c then P else Q fi else Q fi
	
				if b then if c then P else Q fi else Q fi
			≡	b∧(c∧P v ¬c∧Q) v (¬b∧Q)		case analysis twice
			≡	(b∧c∧P) v (b∧¬c∧Q) v (¬b∧Q)		distribution
			≡	b∧c∧P v (b∧¬c v ¬b)∧Q			distribution
			≡	b∧c∧P v (¬bv(b∧¬c))∧Q			symmetry
			≡	b∧c∧P v ((¬bvb) ∧ (¬bv¬c))∧Q		distribution
			≡	b∧c∧P v (⊤∧(¬bv¬c))∧Q			identity
			≡	((b∧c)∧P) v ((¬bv¬c)∧Q)		case analysis
			≡	if b∧c then P else Q fi
			
			
		
5 	Complete the following laws of Binary Theory 
	by adding a right side using only the following symbols (in any quantity)
	
	(i) 	¬∧ab()
	(ii)	¬vab()
	(iii)	¬⇒ab()
	(iv)	≠⇒ab()
	(v)     ¬if then else fi ab()

		(a) (i)		⊤ ≡ ¬(a∧¬a)
			(ii)	⊤ ≡ av¬a
			(iii)	⊤ ≡ a⇒a
			(iv)	⊤ ≡ a≠b⇒b≠a
			(v)	⊤ ≡ if a then a else ¬a fi
			
		(b) (i)		⊥ ≡ a∧¬a
			(ii)	⊥ ≡ ¬(av¬a)
			(iii)	⊥ ≡ ¬(a⇒a)
			(iv)	⊥ ≡ a≠a
			(v)	⊥ ≡ if a then ¬a else a fi
		
		(c) (i)		¬a ≡ ¬a
			(ii)	¬a ≡ ¬a
			(iii)	¬a ≡ ¬a
			(iv)	¬a ≡ a⇒a≠a
			(v)	¬a ≡ ¬a
		
		(d) (i)		a∧b ≡ a∧b
			(ii)	a∧b ≡ ¬(¬av¬b)
			(iii)	a∧b ≡ ¬(a⇒¬b)
			(iv)	a∧b ≡ (a⇒(a≠b))⇒(a≠a)			**
			(v)	a∧b ≡ if a then b else a fi
		
		(e) (i)		avb ≡ ¬(¬a∧¬b)
			(ii)	avb ≡ avb
			(iii)	avb ≡ ¬a⇒b
			(iv)	avb ≡ (a⇒(a≠a))⇒b				**
			(v)	avb ≡ if a then a else b fi
			
			proof of (v):
					if a then a else b fi
				≡	(a∧a)v(¬a∧b)
				≡	av(¬a∧b)
				≡	(av¬a)∧(avb)
				≡	T∧(avb)
				≡	avb
			
		(f) (i)		a=b ≡ ¬(¬(a∧¬b)∧¬(¬a∧¬b))
			(ii)	a=b ≡ ¬(¬av¬b)v¬(avb)
			(iii)	a=b ≡ ¬((a⇒b)⇒¬(b⇒a))
			(iv)	a=b ≡ (a≠b)⇒(a≠a)
			(v)	a=b ≡ if a then b else ¬b fi
			
			proof of (iii):
					¬((a⇒b)⇒¬(b⇒a))
				≡	¬(¬(a⇒b)v¬(b⇒a))
				≡	(a⇒b)∧(b⇒a)
				≡	a=b
				
			proof of (iv):
					(a≠b)⇒(a≠a)
				≡	¬((a⇒b)∧(b⇒a))⇒¬((a⇒a)∧(a⇒a))
				≡	¬((a⇒b)∧(b⇒a))⇒⊥
				≡	((a⇒b)∧(b⇒a))v⊥
				≡	(a⇒b)∧(b⇒a)
				≡	a=b
			
			proof of (v):
					if a then b else ¬b fi
				≡	(a∧b)v(¬a∧¬b)
				≡	((a∧b)v¬a) ∧ ((a∧b)v¬b)
				≡	(av¬a ∧ bv¬a) ∧ (av¬b ∧ bv¬b)
				≡	(⊤ ∧ bv¬a) ∧ (av¬b ∧ ⊤)
				≡	(bv¬a) ∧ (av¬b)
				≡	(a⇒b)∧(b⇒a)
				≡	a=b
		
		(g) (i)		a≠b ≡ (¬(a∧b)∧¬(¬a∧¬b))
			(ii)	a≠b ≡ ¬(av¬b)v¬(¬avb)
			(iii)	a≠b ≡ (a⇒b)⇒¬(b⇒a)
			(iv)	a≠b ≡ a≠b
			(v)	a≠b ≡ if a then ¬b else b fi
			
			proof of (i):
					(¬(a∧b)∧¬(¬a∧¬b))
				≡	¬(a∧b)∧(avb)
				≡	(¬av¬b)∧(avb)
				≡	(¬a∧(avb) v ¬b∧(avb))
				≡	((¬a∧a v ¬a∧b) v (¬b∧a v ¬b∧b))
				≡	((⊥ v ¬a∧b) v (¬b∧a v ⊥))
				≡	(¬a∧b) v (¬b∧a)
				≡	¬(¬(¬a∧b)∧¬(¬b∧a))
				≡	¬((av¬b)∧(bv¬a))
				≡	¬((bv¬a)∧(av¬b))
				≡	¬((a⇒b)∧(b⇒a))
				≡	a≠b
				
			proof of (ii):
					¬(av¬b)v¬(¬avb)
				≡	¬(b⇒a)v¬(a⇒b)
				≡	¬((b⇒a)∧(a⇒b))
				≡	¬((a⇒b)∧(b⇒a))
				≡	a≠b
				
			proof of (iii):
					(a⇒b)⇒¬(b⇒a)
				≡	¬(a⇒b)v¬(b⇒a)
				≡	¬((a⇒b)∧(b⇒a))
				≡	a≠b
				
			proof of (v):
					if a then ¬b else b fi
				≡	(a∧¬b)v(¬a∧b)
				≡	(¬a∧b)v(¬b∧a)
				≡	¬(¬(¬a∧b)∧¬(¬b∧a))
				≡	¬((av¬b)∧(bv¬a))
				≡	¬((bv¬a)∧(av¬b))
				≡	¬((a⇒b)∧(b⇒a))
				≡	a≠b
				
		(h) (i)		a⇒b ≡ ¬(a∧¬b)
			(ii)	a⇒b ≡ ¬avb
			(iii)	a⇒b ≡ a⇒b
			(iv)	a⇒b ≡ a⇒b
			(v)	a⇒b ≡ if a then b else ¬a fi
			
			proof of (v):
					if a then b else ¬a fi
				≡	(a⇒b)∧(¬a⇒¬a)
				≡	(a⇒b)∧⊤
				≡	a⇒b
	
12 	Formalize each of the following statements as a binary expression.
	Start by staying as close as possible to the English, then simplify as much as possible
	(sometimes no simplification is possible). You will have to introduce new basic binary
	expressions like (the door can be opened) for parts that cannot make use of binary operators,
	but for words like "only if" you should use binary operators. You translate meanings from words
	to binary symbols; the meaning of the words may depend on their context and even on facts not
	explicitly stated. Formalization is not a simple substitution of symbols for words.
	
		(a) The door can only be opened if the elevator is stopped.
			A = "the elevator is stopped"
			B = "The door can be opened"
			
				B⇒A
				this allows for the case when the elevator is stopped but
				the door can't be opened. (remember, implication is only false iff 
				the antecedent is true but conclusion is false).
		
		(b)	Neither the elevator door nor the floor door will open unless both of them do.
			A = "The elevator door will open."
			B = "The floor door will open."
			
				¬(AvB)v(A∧B)
				simplifies to:
				(¬A∧¬B)v(A∧B)
			≡	(A∧B)v(¬A∧¬B)
			≡	A=B
		
		(c) Either the motor is jammed or the control is broken.
			A = "The motor is jammed."
			B = "The control is broken."
			
				AvB
			
		(d) Either the light is on or it is off.
			A = "The light is on."
			
				Av¬A
				simplifies to:
				A=A
				or
				A≠¬A
		
		(e) If you press the button, the elevator will come.
			A = "You press the button."
			B = "The elevator will come."
			
				A⇒B
		
		(f) If the power switch is on, the system is operating.
			A = "The power switch is on."
			B = "The system is operating."
			
				A⇒B
				This case allows for the possibility that the
				power switch is off but the system is operating.
				clearly we can't have this, so it must be an iff.
				i.e.:
				(A⇒B)∧(B⇒A)
				which simplifies to:
				A=B
		
		(g) Where there's smoke, there's fire; and there's no smoke, so there's no fire.
			A = "There is smoke."
			B = "There is fire."
			
				(A⇒B)∧(¬A) ⇒ ¬B
				simplifies to:
				(¬AvB)∧(¬A) ⇒ ¬B
			≡	¬((¬AvB)∧(¬A))v¬B
			≡	¬(¬AvB)vAv¬B
			≡	(A∧¬B)v(Av¬B)
			≡	Av(Av¬B) ∧ ¬Bv(Av¬B)
			≡	(AvAv¬B)v(¬BvAv¬B)
			≡	(Av¬B)v(Av¬B)
			≡	Av¬B
			≡	B⇒A
				or A⇐B
		
		(h) Where there's smoke, there's fire; and there's no fire; so there's no smoke.
			A = "There is smoke."
			B = "There is fire."
			
				(A⇒B)∧(¬B) ⇒ ¬A
				simplifies to:
			≡	¬((¬AvB)∧(¬B))v¬A
			≡	¬(¬AvB)vBv¬A
			≡	(A∧¬B)v(Bv¬A)
			≡	AvBv¬A ∧ ¬BvBv¬A
			≡	B∧¬A
			≡	A⇒B
				
		
		(i) You can't score if you don't shoot.
			A = "You score."
			B = "You shoot."
			
				¬B⇒¬A
				simplifies to:
				A⇒B
		
		(j) If you have a key, only then can you open the door.
			A = "You have a key."
			B = "You can open the door"
			
				¬(A≠B)
				or, (A⇒B)∧(B⇒A)
				or, A=B
		
		(k) No pain, no gain.
			A = "There is no pain."
			B = "There is no gain."
			
				¬A⇒¬B
				simplifies to:
				B⇒A
				or
				A⇐B
		
		(l) No shirt? No shoes? No service!
			A = "You have a shirt."
			B = "You have shoes."
			C = "You get service."
			
				¬Av¬B⇒¬C
				simplifies to:
				¬(¬Av¬B)v¬C
			≡	(A∧B)v¬C
			≡	C⇒(A∧B)
				or
				(A∧B)⇐C
		
		(m) If it happens, it happens.
			A = "It happens"
			
				A⇒A
				simplifies to:
				⊤
			
	
16 	(tennis) An advertisement for a tennis magazine says "If I'm not playing tennis, I'm watching
	tennis. And if I'm not watching tennis, I'm reading about tennis.". Assuming the speaker cannot
	do more than one of these activities at a time,
	
	(a) Prove that the speaker is not reading about tennis.
		A = "I'm playing tennis."
		B = "I'm watching tennis."
		C = "I'm reading about tennis."
		
		So we have:
			¬A⇒B
			¬B⇒C
		which we form (¬A⇒B)∧(¬B⇒C), and use this:
		We show that (¬A⇒B)∧(¬B⇒C) is false when we assume C is true while A and B are false.
		
			(¬A⇒B)∧(¬B⇒C)		
		≡	(¬(A=⊥)⇒(B=⊥)∧(¬(B=⊥)⇒(C=⊤)))	context.
		≡	(¬⊥⇒⊥ ∧(¬⊥⇒⊤))					
		≡	(⊥v⊥ ∧ ⊥v⊤)				M.I.
		≡	(⊥ ∧ ⊥v⊤)				Identity.
		≡	(⊥∧⊥ v ⊥∧⊤)				Distribution.
		≡	(⊥ v ⊥)				Identity.
		≡	⊥
		
		So the speaker is not reading about tennis.
	
	(b) What is the speaker doing?
		
		We find the class for our binary expressions which evaluates this to true.
		
		Since C is false, let's assume the other two cases: 
		A true while B and C false, and B true while A and C false.
		
		For the first case:
		
			(¬A⇒B)∧(¬B⇒C)		
		≡	(¬(A=⊤)⇒(B=⊥)∧(¬(B=⊥)⇒(C=⊥)))	context.
		≡	(¬⊤⇒⊥ ∧(¬⊥⇒⊥))
		≡	(⊤v⊥ ∧ ⊥v⊥)				M.I.
		≡	(⊤v⊥ ∧ ⊥)				Identity.
		≡	(⊤∧⊥ v ⊥∧⊥)				Distribution.
		≡	(⊥ v ⊥)				Identity.
		≡	⊥
		
		So A is false, and the speaker is not playing tennis.
		Since we're assuming only one of A,B,C can be true, then clearly B must be true.
		For brevity, we prove it:
		
			(¬A⇒B)∧(¬B⇒C)		
		≡	(¬(A=⊥)⇒(B=⊤)∧(¬(B=⊤)⇒(C=⊥)))	context.
		≡	(¬⊥⇒⊤ ∧(¬⊤⇒⊥))					
		≡	(⊥v⊤ ∧ ⊤v⊥)				M.I.
		≡	⊥v(⊤∧⊤)				Distribution.
		≡	⊥v⊤					Identity
		≡	⊤
		
		prof hehner's solution:
		
		abbreviations: p="I'm playing tennis.", w="I'm watching tennis.",
		r="I'm reading about tennis."
		
		Given information is the first line of the proof: 
		
			(¬p⇒w)∧(¬w⇒r)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		contrapositive
		≡	(¬p⇒w)∧(¬r⇒w)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		antidistributive
		≡	(¬pv¬r)⇒w)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)			duality
		≡	(¬(p∧r))⇒w)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)			discharge
		≡	w∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)				use w to simplify
		≡	w∧¬p∧¬(p∧r)∧¬r					use ¬p and then ¬r to simplify
		≡	w∧¬p∧¬r						specialize
		⇒	¬r
		
		if we interpret the second sentence as "and if I'm not also watching
		tennis, I'm reading about tennis", then we formalize this as:
		¬p∧¬w⇒r, and we have another deduction:
		
			(¬p⇒w)∧(¬p∧¬w⇒r)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		portation
		≡	(¬p⇒w)∧(¬p⇒(¬w⇒r))∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		distribution
		≡	(¬p⇒w)∧(¬w⇒r)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		use context w
		≡	(¬p⇒w)∧¬(p∧w)∧¬(p∧r)∧¬(r∧w)		
		≡	¬p=w ∧ ¬(p∧r)∧¬(r∧w)
		≡	¬p=w ∧ ¬(p∧r)∧¬(r∧¬p)
		≡	p≠w ∧ ¬r
		⇒	¬r							specialize.
		
		In either case, we get ¬r.
		
		As for what the speaker is doing:
		Look at the second-last line from the first interpretation:
		w∧¬p∧¬r,and hence the speaker is watching tennis.
		
		
		


10.2 - Basic Data Structures

41 	For naturals n and m, we can express the statement "n is a factor of m" formally as follows: 
	m:n×nat
	
	(a) What are the factors of 0?
		every natural number, such that 0:n×nat.
		
	(b) What is 0 a factor of?
		itself. 0, such that 0:0×nat
		i.e. "0 is a factor of m" iff m:0×nat iff m = 0.
		
	(c) What are the factors of 1?
		itself. 1, such that 1:1×nat
		
	(d) What is 1 a factor of?
		every natural number: m:1×nat = m:nat
	
44 	(von Neumann numbers)

	(a) Is there any harm in adding the axioms:
			0 = {null}	the empty set
			n+1 = {n,~n}	for each natural n
	
			Notice that for n=0, 0+1 = {{null},~{null}} = {{null},null} = 1, and so on.
			There seems to be no harm in adding these axioms.
	
	(b) What correspondence is induced by these axioms between the arithmetic operations and the set operations?
		
			An isomorphism.
		
	(c) Is there any harm in adding the axioms:
			0 = {null}	the empty set
			i+1 = {i,~i}	for each integer i
			
			Yes. Simply take the case i=-1, which would imply:
			-1+1 = 0 = {-1, ~(-1)}, but ~(-1) is not defined in this context.
			
			prof hehner's proof:
				
				-1+1 = {-1,~-1}		arithmetic.
			≡	0 = {-1,~-1}		use first axiom.
			≡	{null} = {-1,~-1}		equation axiom of set theory.
			≡	null = -1,~-1
			⇒	-1:null		conjoin an instance of an axiom for null.
			≡	-1:null:0		transitivity.
			⇒	-1:0		-1 and 0 are elements.
			≡	-1=0
			a contradiction.
			
53 	Simplify (no proof) - well, add proof anyways.
	
	(a)	0→1|1→2|2→3|3→4|4→5|[0;..5]
	
			0→1|1→2|2→3|3→4|4→5|[0;..5]
		≡	[1;2;3;4;5]
		≡	[1;..6]
	
	(b)	(4→2 | [-3;..3])3
		
			(4→2 | [-3;..3])3
		≡	([-3;-2;-1;0;2;2])3
		≡	0
		
	(c)	((3;2)→[10;..15]|3→[5;..10]|[0;..5])3
	
			((3;2)→[10;..15]|3→[5;..10]|[0;..5])3
		≡	(3→(2→[10;..15])|3→[5;..10]|[0;..5])3
		≡	(3→(2→[10;..15])|3→[5;..10]|[0;..5])3
		≡	(3→(2→[10;..15]|[5;..10])|[0;1;2;[5;..10];4])3
		≡	(3→([5;6;[10;..15];8;9;])|[0;1;2;[5;..10];4])3
		≡	([0;1;2;[5;6;[10;..15];8;9];4])3
		≡	[5;6;[10;..15];8;9]
	
	(d)	([0;..5][3;4])1
	
			([0;..5][3;4])1
		≡	([3;4])1
		≡	4
	
	(e)	(2;2)→"j"|[["abc"];["de"];["fghi"]]
		
			(2;2)→"j"|[["abc"];["de"];["fghi"]]
		≡	2→(2→"j"|["fghi"])|[["abc"];["de"];["fghi"]]
		≡	2→["fgji"]|[["abc"];["de"];["fghi"]]
		≡	[["abc"];["de"];["fgji"]]
	
	(f)	#nat
	
			#nat
		≡	1		(because "a nonempty bunch of items is also an item.")
		
	(g)	#[*3]
				
			#[*3]	
		≡	#[nat*3]
		≡	nat		(i.e., countably infinite)
	
	(h)	[3;4]:[3*4*int]
	
			[3;4]:[3*4*int]
		≡	[3;4]:[3*4*int]
		≡	[3;4]:[[int,int,int,int],[int,int,int,int],[int,int,int,int]]
		⇒	#([3;4]):#([[int,int,int,int],[int,int,int,int],[int,int,int,int]])
		≡	2 : 12
		≡	⊥
		
	(i)	[3;4]:[3;int]
	
			[3;4]:[3;int]
		⇒	#([3;4]):#([3;int])
		≡	2 : 2
		≡	⊤
		
	(j)	[3,4;5]:[2*int]
	
			[3,4;5]:[2*int]
		≡	[3],[4;5]:[int,int]
		⇒	#([3],[4;5]):#[int,int]
		≡	1,2 : 2
		≡	1:2 ∧ 2:2
		≡	⊥∧⊤
		≡	⊥
		
	(k)	[(3,4);5]:[2*int]
		
			[(3,4);5]:[2*int]
		≡	[(3;5),(4;5)]:[int,int]
		≡	[(3;5)],[(4;5)]:[int,int]
		⇐	[int,int],[int,int]:[int,int]
		≡	⊤
		
	(l)	[3;(4,5);6;(7,8,9)]'[3;4;(5,6);(7,8)]		***
	
			[3;(4,5);6;(7,8,9)]'[3;4;(5,6);(7,8)]
		≡	[(3;4),(3;5);((6;7),(6;8),(6;8))]'[3;4;((5;7),(5;8),(6;7),(6;8))]
		≡	[(3;4;6;7),(3;4;6;8),(3;4;6;9),(3;5;6;7),(3;5;6;8),(3;4;6;8)]'
			[(3;4;5;7),(3;4;5;8),(3;4;6;7),(3;4;6;8)]
		≡	[3;4;6;7],[3;4;6;8]
		≡	[3;4;6;(7,8)]
			
10.3 - Function Theory

55	 In each of the following, replace p by:
	〈x:int→〈y:int→〈z:int→x≥0 ∧ x^2 ≤y ∧ ∀z: int·z^2 ≤y ⇒ z≤x〉〉〉
	and simplify, assuming x,y,z,u,w:int.
	
	(a)	p(x+y)(2×u+w)z
			
			〈x:int→〈y:int→〈z:int→〈x≥0 ∧ x^2 ≤y ∧ ∀z: int·z^2 ≤y ⇒ z≤x〉〉〉(x+y)(2×u+w)z
			
			note: variables x,y,z appear both locally and nonlocally.
			varible z is introduced twice locally.
			avoiding confusion, we rename the local variables to a,b,c,d resp.
			
		≡	〈a:int→〈b:int→〈c:int→〈a≥0 ∧ a^2 ≤b ∧ ∀d: int·d^2 ≤b ⇒ d≤a〉〉〉(x+y)(2×u+w)z
		≡	〈x+y:int→〈2×u+w:int→〈z:int→〈x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d: int·d^2 ≤ (2×u+w) ⇒ d≤x+y〉〉〉
		≡	〈x+y:int→〈2×u+w:int→〈z:int→〈x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d: int·d^2 ≤ (2×u+w) ⇒ d≤x+y〉〉〉
		≡	〈x,y,z,u,w:int → x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d:int·d^2 ≤ (2×u+w) ⇒ d≤x+y〉
		≡	x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d: int·d^2 ≤(2×u+w) ⇒ d≤x+y
		
	(b)	p(x+y)(2×u+w)
	
			〈x:int→〈y:int→〈z:int→〈x≥0 ∧ x^2 ≤y ∧ ∀z: int·z^2 ≤y ⇒ z≤x〉〉〉(x+y)(2×u+w)
			
			note: variables x,y,z appear both locally and nonlocally.
			variable z is introduced twice locally.
			avoiding confusion, we rename the local variables to a,b,c,d resp.
			
		≡	〈a:int→〈b:int→〈c:int→〈a≥0 ∧ a^2 ≤b ∧ ∀d: int· d^2 ≤ b ⇒ z≤a〉〉〉(x+y)(2×u+w)
		≡	〈x+y:int→〈2×u+w:int→〈c:int→〈x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d:int·d^2 ≤(2×u+w) ⇒ d≤x+y〉〉〉
		≡	〈c:int→〈x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d:int·d^2 ≤(2×u+w) ⇒ d≤x+y〉
		≡	int→〈x+y≥0 ∧ (x+y)^2 ≤(2×u+w) ∧ ∀d:int·d^2 ≤(2×u+w) ⇒ d≤x+y〉
		
	(c)	p(x+z)(y+y)(2+z)
		
			〈x:int→〈y:int→〈z:int→x≥0 ∧ x^2 ≤y ∧ ∀z: int·z^2 ≤y ⇒ z≤x〉〉〉(x+z)(y+y)(2+z)
			
			note: variables x,y,z appear both locally and nonlocally.
			variable z is introduced twice locally.
			avoiding confusion, we rename the local variables to a,b,c,d resp.
			
		≡	〈a:int→〈b:int→〈c:int→a≥0 ∧ a^2 ≤b ∧ ∀d: int·d^2 ≤b ⇒ d≤a〉〉〉(x+z)(y+y)(2+z)
		≡	〈(x+z):int→〈(y+y):int→〈(2+z):int→(x+z)≥0 ∧ (x+z)^2 ≤(y+y) ∧ ∀d: int·d^2 ≤(y+y) ⇒ d≤(x+z)〉〉〉
		≡	(x+z)≥0 ∧ (x+z)^2 ≤(y+y) ∧ ∀d: int·d^2 ≤(y+y) ⇒ d≤(x+z)
		
63 	(whodunit) Here are ten statements:
	(i) Some criminal robbed the Russell mansion
	(ii) Whoever robbed the Russell mansion either had an accomplice among the servants or had to break in.
	(iii) To break in, one would have to either smash the door or pick the lock.
	(iv) Only an expert locksmith could pick the lock.
	(v) Anyone smashing the door would have been heard.
	(vi) Nobody was heard.
	(vii) No one could rob the Russell mansion without fooling the guard.
	(viii) To fool the guard, one must be a convincing actor.
	(ix) No criminal could be both an expert locksmith and a convincing actor.
	(x) Some criminal had an accomplice among the servants.
	
		(a) Choosing good abbreviations, translate each of these statements into formal logic.
				
				Abbreviations:
					C(x) : x is a criminal.
					R(x) : x robbed the Russell mansion.
					S(x) : x had an accomplice among the servants.
					B(x) : x broke in.
					D(x) : x smashed the door.
					P(x) : x picked the lock.
					L(x) : x is an expert locksmith.
					H(x) : x was heard.
					F(x) : x fooled the guard.
					A(x) : x is a convincing actor.
				
				Formalizations: 
				(i) Some criminal robbed the Russell mansion
					∃x·C(x)∧R(x)
					
				(ii) Whoever robbed the Russell mansion either had an accomplice among the servants or had to break in.
					∀x·R(x)⇒(S(x)∨B(x))
				
				(iii) To break in, one would have to either smash the door or pick the lock.
					∀x·B(x)⇒(D(x)∨P(x))
				
				(iv) Only an expert locksmith could pick the lock.
					∀x·P(x)⇒L(x)
				
				(v) Anyone smashing the door would have been heard.
					∀x·D(x)⇒H(x)
				
				(vi) Nobody was heard.
					¬∃x·H(x)
				
				(vii) No one could rob the Russell mansion without fooling the guard.
					¬∃x·R(x)∧¬F(x)
				
				(viii) To fool the guard, one must be a convincing actor.
					∀x·F(x)⇒A(x)
				
				(ix) No criminal could be both an expert locksmith and a convincing actor.
					¬∃x·C(x)∧L(x)∧A(x)
				
				(x) Some criminal had an accomplice among the servants.
					∃x·C(x)∧S(x)
		
		(b) Taking the first nine statements as axioms, prove the tenth.
		
				Axioms:
						∃x·C(x)∧R(x)
					∧	∀x·R(x)⇒(S(x)∨B(x))
					∧	∀x·B(x)⇒(D(x)∨P(x))
					∧	∀x·P(x)⇒L(x)
					∧	∀x·D(x)⇒H(x)
					∧	¬∃x·H(x)
					∧	¬∃x·R(x)∧¬F(x)
					∧	∀x·F(x)⇒A(x)
					∧	¬∃x·C(x)∧L(x)∧A(x)
					
				Lemma:
						⊤			axiom vii.
					≡	¬∃x·R(x)∧¬F(x)		duality.
					≡	∀·x¬(R(x)∧¬F(x))	duality.
					≡	∀·x¬R(x)∨¬¬F(x)	double negation.
					≡	∀·x¬R(x)∨F(x)		material implication.
					≡	∀·xR(x)⇒F(x)
					
				Main proof:
				
						⊤					axiom i.
					≡	∃x·C(x)∧R(x)				idempotence.
					≡	∃x·C(x)∧R(x)∧R(x)			lemma, axiom ii.
					⇒	∃x·C(x)∧F(x)∧(S(x)∨B(x))		axiom viii, axiom iii.
					⇒	∃x·C(x)∧A(x)∧(S(x)∨D(x)∨P(x))	axiom v, axiom iv.
					⇒	∃x·C(x)∧A(x)∧(S(x)∨H(x)∨L(x))	distribution.
					≡	∃x·C(x)∧A(x)∧(S(x)∨ 
						C(x)∧A(x) ∧ H(x) ∨ C(x)∧A(x) ∧ L(x))		axiom vi, axiom ix.
					≡	∃x·C(x)∧A(x)∧S(x)			specialize.
					⇒	∃x·C(x)∧S(x)
						
					
					
					
Practice T0, 2014.

0	Let all variables be boolean. Using the notations, format and methods, prove:

	(a)	if b then c else ¬c ≡ if c then b else ¬b
	
			if b then c else ¬c		case analysis.
		≡	(b∧c)∨(¬b∧¬c)			symmetry, twice.
		≡	(c∧b)∨(¬c∧¬b)			case analysis.
		≡	if c then b else ¬b
	
	(b)	(a⇒(p=x))∧(¬a⇒p) ≡ p=(x∨¬a)
	
			p=(x∨¬a)					case idempotent (generic).
		≡	if a then p=(x∨¬a) else p=(x∨¬a) fi		context (changing exp2, assume ¬exp0)
		≡	if a then p=(x∨¬⊤) else p=(x∨¬⊥) fi		binary laws.
		≡	if a then p=(x∨⊥) else p=(x∨⊤) fi		identity.
		≡	if a then p=x else p=⊤ fi			identity.
		≡	if a then p=x else p fi				case analysis (part ii).
		≡	(a⇒(p=x))∧(¬a⇒p)
			
1	Let A be a bunch of booleans such that A = ¬A. What is A?
		null.

2	Let B = 1,3,5. What is:
	
	(a) ¢(B+B)
		= ¢(1,3,5+1,3,5)
		= ¢(1+1,1+3,1+5,3+1,3+3,3+5,5+1,5+3,5+5)
		= ¢(2,4,6,4,6,8,6,8,10)
		= ¢(2,4,6,8,10)
		= 5
	
	(b) ¢(B×2)
		= ¢((1,3,5)×2)
		= ¢(2,6,10)
		= 3
	
	(c) ¢(B×B)
		= ¢(1,3,5×1,3,5)
		= ¢(1×1,1×3,1×5,3×1,3×3,3×5,5×1,5×3,5×5)
		= ¢(1,3,5,3,9,15,5,15,25)
		= ¢(1,3,5,9,15,25)
		= 6
		
	(d) ¢(B^2)
		= ¢((1,3,5)^2)
		= ¢(1,9,25)
		= 3
		
		
3	A list is bitonic if it is monotonic up to some index, and antimonotonic after that.
	For example, [1;3;4;5;5;6;4;4;3] is bitonic. Either the monotonic part or the antimonotonic
	part or both could be empty. Express formally that L is bitonic.
	
		∃n:0,..#L+1·(∀i,j:0,..n·i≤j ⇒ Li≤Lj)∧(∀i,j:n,..#L·i≤j ⇒ Lj≤Li)
	
4	There are some people in a bar. Formalize and prove the statement
	"There's a person in the bar such that, if that person drinks, then everyone in the bar drinks.".
		
		Let Dx be the predicate "x drinks". We assume x is in the domain of people.
		
			∃x·Dx ⇒ ∀y·Dy		antidistributive law.
		≡	∀x·(Dx⇒∀y·Dy)		reflexivity.
		≡	∀x·Dx⇒∀y·Dy
		≡	⊤
		
T0, 2015. ⊤⊥

0	Let a,b be binary variables. Prove a=(a⇒b) ≡ a∧b.
		
			a=(a⇒b)
		≡	a=(¬a∨b)		m.i.
		≡	(a∧(¬a∨b))∨(¬a∧¬(¬a∨b))	law of equality
		≡	(a∧(¬a∨b))∨¬a∧(a∧¬b)	distrib.
		≡	(a∧(¬a∨b))∨(¬a∧a∧¬b)
		≡	(a∧¬a)∨(a∧b)∨(¬a∧a∧¬b)
		≡	⊥∨(a∧b)∨⊥
		≡	(a∧b)∨⊥
		≡	(a∧b)
		
		prof. solution:
		
			(a=(a⇒b) = a∧b)		symmetry of =
		≡	((a⇒b)=a = a∧b)		assoc of =
		≡	((a⇒b) = a=(a∧b))		symmetry of =
		≡	((a⇒b) = (a∧b)=a)		inclusion
		≡	⊤

1	Let b,c,d,P,Q be binary variables. 
	Prove if if b then c else d fi then P else Q fi = if b then if c then P else Q fi else if d then P else Q fi fi
	
		prof. solution:
		
			if if b then c else d fi then P else Q fi				case analysis.
		≡	if b then c else d fi ∧ P ∨ ¬if b then c else d fi ∧ Q		distrib.
		≡	if b then c∧P else d∧P ∨ if b then ¬c∧Q else ¬d∧Q fi			distrib.
		≡	if b then c∧P ∨ ¬c∧Q else d∧P ∨ ¬d∧Q fi				case analysis.
		≡	if b then if c then P else Q fi else if d then P else Q fi fi

2	Prove ¬7:null
		
		prof. solution:
		
			proof by contradiction:
			
			7:null				conjoin an instance of an axiom for null.
		≡	7:null ∧ null:7			antisymmetry.
		≡	7=null				transparency.
		⇒	¢7 = ¢null			size axioms; 7 is an element.
		≡	1 = 0				symmetry and conjoin direction axiom 0<1.
		≡	0<1 ∧ 0=1			conjoin instance of generic axiom.
		≡	(0<1 ∧ 0=1)∧¬(0<1 ∧ 0=1)	noncontradiction.
		≡	⊥
			
3	If P:bin→bin is monotonic, prove (∃x·Px)=P⊤

			⊤					definition of monotonic.
		≡	∀x,y:bin·(x⇒y ⇒ Px⇒Py)		specialize.
		⇒	(⊥⇒⊤ ⇒ P⊥⇒P⊤)			base and identity laws.
		≡	P⊥⇒P⊤					law of inclusion.
		≡	(P⊥∨P⊤)=P⊤				quantifier law; one-element domain.
		≡	((∃x:⊥·Px)v(∃x:⊤·Px))=P⊤		quantifier law; union domain.
		≡	(∃x:bin·Px)=P⊤
		
		
10.3 - Program Theory

99	Prove or disprove
	
	(a)	R.if b then P else Q fi ≡ if b then R.P else R.Q fi
	
			R.if b then P else Q fi
		≡	R.(b∧P)∨(¬b∧Q)
		≡	(R.b∧R.P)∨(R.¬b∧R.Q)
		≡	(b∧R.P)∨(¬b∧R.Q)
		≡	if b then R.P else R.Q fi
	
	(b)	if b then P⇒Q else R⇒S fi ≡ if b then P else R fi ⇒ if b then Q else S fi
	
			if b then P⇒Q else R⇒S fi
		≡	(b⇒P⇒Q)∨(¬b⇒R⇒S)
		≡	((b∧P)⇒Q)∧((¬b∧R)⇒S)
		≡	(¬(b∧P)∨Q)∧(¬(¬b∧R)∨S)
		≡	((¬(b∧P)∨Q)∧(¬(¬b∧R)))∨((¬(b∧P)∨Q)∧S)
		≡	¬(b∧P)∧(¬(¬b∧R)) ∨ (¬(¬b∧R))∧Q ∨ ¬(b∧P)∧S ∨ Q∧S
		≡	¬(b∧P)∧(¬(¬b∧R)) ∨ (b∧Q)∨(¬R∧Q) ∨ (¬b∧S) ∨ ¬P∧S ∨ Q∧S
		≡	¬(b∧P)∧(¬(¬b∧R)) ∨ (b∧Q) ∨ (¬b∧S) ∨ (¬R∧Q)∨(¬P∧S)∨(Q∧S)
		≡	¬(b∧P)∧(¬(¬b∧R)) ∨ (b∧Q) ∨ (¬b∧S) ∨ (¬R∧Q)∨(¬P∧S)∨(Q∧S)
		⇐	¬(b∧P)∧(¬(¬b∧R)) ∨ (b∧Q) ∨ (¬b∧S)
		≡	if b then P else R fi ⇒ if b then Q else S fi
		
	(c)	if b then P.Q else R.S fi ≡ if b then P else R fi.if b then Q else S fi
	
			if b then P else R fi.if b then Q else S fi
		≡	(b∧P)∨(¬b∧R).(b∧Q)∨(¬b∧S)
		≡	(b∧P).(b∧Q)∨(b∧P).(¬b∧S)∨(¬b∧R).(b∧Q)∨(¬b∧R).(¬b∧S)
		≡	(b∧P.Q)∨(b∧P).(¬b∧S)∨(¬b∧R).(b∧Q)∨(¬b∧R.s)
		≡	(b∧P.Q)∨(¬b∧R.s)
		≡	if b then P.Q else R.S fi
	
116	Let a,b,c be integer variables. Simplify:
	
	(a)	b:=a-b. b:=a-b
	
			b:=a-b. b:=a-b
		≡	b'=a-b ∧ a'=a . b'=a-b ∧ a'=a
		≡	∃b'',a'':int·(b''=a-b ∧ a''=a) ∧ (b'=a''-b'' ∧ a'=a'')
		≡	∃b'',a'':int·(b''=a-b ∧ a''=a) ∧ (b''=a''-b' ∧ a''=a')
		≡	(a'-b = a-b) ∧ a'=a
		≡	a-b = a-b
		≡	b'=b ∧ a'=a
	
	(b)	a:=a+b. b:=a-b. a:=a-b
	
			a:=a+b. b:=a-b. a:=a-b
		≡	a'=a+b ∧ b'=b . b'=a-b ∧ a'=a . a'=a-b ∧ b'=b
		≡	(∃b'',a'':int·(a''=a+b ∧ b''=b) ∧ (b'=a''-b'' ∧ a'=a'')). a'=a-b ∧ b'=b
		≡	(∃b'',a'':int·(a''=a+b ∧ b''=b) ∧ (b''=a''-b' ∧ a''=a')). a'=a-b ∧ b'=b
		≡	(∃b'',a'':int·(a''=a+b ∧ b''=b) ∧ (b''=a''-b' ∧ a''=a')). a'=a-b ∧ b'=b
		≡	(a'=a+b ∧ a'-b'=b). a'=a-b ∧ b'=b
		≡	(a'=a+b ∧ a'=b+b'). a'=a-b ∧ b'=b
		≡	(a'=a+b ∧ a'=b+b'). a'=a-b ∧ b'=b
		≡	(a=b'). a'=a-b ∧ b'=b
		≡	(b'=a)∧(a'=a). a'=a-b ∧ b'=b
		≡	∃b'',a'':int·b''=a ∧ a''=a ∧ a'=a''-b'' ∧ b'=b''
		≡	∃b'',a'':int·b''=a ∧ a=a'' ∧ a''=a'+b'' ∧ b''=b'
		≡	b'=a'+b'
		≡	a'=0 ∧ b'=b
		
	(c)	c:=a-b-c. b:=a-b-c. a:=a-b-c. c:=a+b+c
	
			c:=a-b-c. b:=a-b-c. a:=a-b-c. c:=a+b+c
		≡	a'=a ∧ b'=b ∧ c'=a-b-c. a'=a ∧ b'=a-b-c ∧ c'=c . a'=a-b-c ∧ b'=b ∧ c'=c . a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(∃c'',b'',a'':int·(a''=a ∧ b''=b ∧ c''=a-b-c)∧(a'=a'' ∧ b'=a''-b''-c'' ∧ c'=c'')). a'=a-b-c ∧ b'=b ∧ c'=c . a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(∃c'',b'',a'':int·(a=a'' ∧ b''=b ∧ c''=a-b-c)∧(a''=a' ∧ b'=a''-b''-c'' ∧ c''=c')). a'=a-b-c ∧ b'=b ∧ c'=c . a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(a'=a ∧ b'=c ∧ c'=c).a'=a-b-c ∧ b'=b ∧ c'=c . a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(∃c'',b'',a'':int·(a''=a ∧ b''=c ∧ c''=c)∧(a'=a''-b''-c'' ∧ b'=b'' ∧ c'=c'')). a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(∃c'',b'',a'':int·(a''=a ∧ b''=c ∧ c''=c)∧(a''=a'+b''+c'' ∧ b''=b' ∧ c''=c')). a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(a'=a-2c ∧ b'=c ∧ c'=c). a'=a ∧ b'=b ∧ c'=a+b+c
		≡	(∃c'',b'',a'':int·(a''=a-2c ∧ b''=c ∧ c''=c)∧ (a'=a'' ∧ b'=b'' ∧ c'=a''+b''+c''))
		≡	(∃c'',b'',a'':int·(a''=a-2c ∧ b''=c ∧ c''=c)∧ (a''=a' ∧ b''=b' ∧ c''=c'-a''-b''))
		≡	a'=a-2c ∧ b'=c ∧ c'=c+a'+b'
		≡	a'=a-2c ∧ b'=c ∧ c'=a
	
120	In natural variables s and n, prove
	P⇐if n=0 then ok else n:=n-1. s:=s+2^n -n. t:=t+1. P fi
	where P = s'=s+2^n -n×(n-1)/2-1 ∧ n'=0 ∧ t'=t+n

125	(square) Let s and n be natural variables. Find a specification P such that both the following hold:
	s'=n^2 ⇐ s:=n.P
	P ⇐ if n=0 then ok else n:=n-1. s:=s+n+n. P fi
	This program squares using only addition, subtraction and test for zero.

133	Let n and r be natural variables in the refinement
	P ⇐ if n=1 then r:=0 else n:=div n2. P. r:=r+1 fi
	Suppose the operations div and + each take time 1 and all else is free (even the call is free).
	Insert appropriate time increments, and fine an appropriate P to express the execution time in terms of
	(a)	the initial values of the memory variables. Prove the refinement for your choice of P.
	(b) the final values of the memory variables. Prove the refinement for your choice of P.
	
	
〈〉≤≥¢→×⊤⊥∀∃·≠≡∧∨¬⇒⇐σ

158, 161, 215, 263, 208a.